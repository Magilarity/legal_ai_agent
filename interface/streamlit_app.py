"""
Streamlit UI –¥–ª—è Magilarity Legal AI Agent
"""

import streamlit as st
import time
from interface.prozorro_loader import download_documents
from app.full_analysis import analyze_tender
from app.metrics import init_metrics, REQUEST_COUNT, REQUEST_LATENCY, registry
from prometheus_client import generate_latest

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞–∑–≤–∏ –ø—Ä–æ—î–∫—Ç—É
st.set_page_config(page_title="Magilarity Legal AI Agent", page_icon="‚öñÔ∏è")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ HTTP-—Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫
init_metrics()


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è Streamlit-–¥–æ–¥–∞—Ç–∫—É.
    """
    st.title("Magilarity Legal AI Agent")

    tender_id = st.text_input(
        "Tender ID",
        help="–í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–µ–Ω–¥–µ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ UA-2025-06-09-008224-a)",
    )

    if st.button("Analyze"):
        start_ts = time.time()
        try:
            REQUEST_COUNT.labels(endpoint="analyze").inc()

            path = download_documents(tender_id)
            st.write(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: `{path}`")

            analyze_tender(tender_id)
            st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        except Exception as e:
            st.error(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {e}")
        finally:
            elapsed = time.time() - start_ts
            REQUEST_LATENCY.labels(endpoint="analyze").observe(elapsed)

    if st.checkbox("Show Prometheus metrics"):
        metrics_output = generate_latest(registry)
        st.text(metrics_output.decode("utf-8"))


if __name__ == "__main__":
    main()
